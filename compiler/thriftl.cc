#line 2 "thriftl.cc"

#line 4 "thriftl.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 173
#define YY_END_OF_BUFFER 174
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1711] =
    {   0,
        1,  166,    1,  166,  174,  171,  172,  173,    1,  171,
      172,  173,    1,  173,  169,  171,  172,  173,    5,  171,
      172,  173,   60,  171,  172,  173,    6,  171,  172,  173,
        7,  171,  172,  173,  166,  171,  172,  173,  166,  168,
      171,  172,  173,  171,  172,  173,  171,  172,  173,  164,
      166,  171,  172,  173,  164,  166,  171,  172,  173,  167,
      168,  171,  172,  173,  167,  168,  171,  172,  173,  167,
      168,  171,  172,  173,  167,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,

      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,  167,  168,
      171,  172,  173,  167,  168,  171,  172,  173,    1,    5,
      164,  166,  168,  164,  166,  168,  168,  166,    4,  167,

      168,  167,  168,  168,  166,  167,  168,  167,  168,  167,
      167,  167,  168,  167,  168,  167,  168,  167,  168,   74,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,   88,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,   33,  167,  168,  111,  167,  168,  167,
      168,  114,  167,  168,  118,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,

      168,  167,  168,  167,  168,  167,  168,  126,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,   34,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  166,
      166,  168,  166,  168,    4,  165,  167,  168,   62,  167,
      168,  167,  167,  167,  167,  167,  167,  167,  168,  167,

      168,   72,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,   84,  167,  168,   86,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
       94,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  106,
      167,  168,  167,  168,  167,  168,  167,  168,   35,  167,
      168,   37,  167,  168,   39,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,

      168,   45,  167,  168,  167,  168,  167,  168,  167,  168,
      122,  167,  168,  167,  168,   32,  124,  167,  168,  125,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  149,  167,  168,  167,  168,   36,
      167,  168,   38,  167,  168,   40,  167,  168,  167,  168,

      167,  168,  167,  168,  167,  168,  167,  168,  155,  167,
      168,  156,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  162,  167,  168,  167,
      168,  167,  168,    2,  167,  168,  167,  167,  167,  167,
      167,  167,  167,  167,  168,  167,  168,   73,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,   31,  167,
      168,  167,  168,   78,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,   90,  167,  168,   91,  167,  168,

      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,   56,  167,  168,  167,  168,  103,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  110,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  123,  167,  168,  167,  168,  167,  168,  127,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  134,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,

      167,  168,  139,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  145,  167,  168,  146,  167,  168,  167,
      168,  167,  168,  167,  168,    9,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,   30,  167,  168,  167,  168,  159,  167,  168,
      167,  168,  161,  167,  168,  167,  168,  167,  168,    3,
        2,  170,   61,  167,  168,  167,  167,  167,  167,  167,
      167,  167,  167,  168,   71,  167,  168,   46,  167,  168,
      167,  168,   76,  167,  168,  167,  168,   77,  167,  168,

       79,  167,  168,   80,  167,  168,   81,  167,  168,  167,
      168,   57,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,   93,  167,
      168,  167,  168,  167,  168,   98,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,    8,  167,
      168,  167,  168,   41,  105,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,

      168,  167,  168,  129,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  133,  167,  168,  167,  168,  167,
      168,  167,  168,  136,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  142,  167,  168,  167,  168,  167,  168,  147,
      167,  168,   55,  167,  168,  167,  168,  167,  168,  150,
      167,  168,   50,  151,  167,  168,  167,  168,  167,  168,
      154,  167,  168,  167,  168,  167,  168,  160,  167,  168,
      167,  168,  167,  168,  167,  168,  163,  167,  168,    3,
      170,    2,  170,  167,  167,  167,  167,  167,  167,  167,

      167,  168,   75,  167,  168,   44,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,   87,  167,  168,  167,  168,   42,
      167,  168,  167,  168,   92,  167,  168,  167,  168,   96,
      167,  168,  167,  168,  167,  168,  101,  167,  168,  102,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      109,  167,  168,  167,  168,  113,  167,  168,  167,  168,
      115,  167,  168,  167,  168,  167,  168,  167,  168,  119,
      167,  168,  120,  167,  168,  167,  168,  121,  167,  168,
       47,  167,  168,  167,  168,  167,  168,  167,  168,  167,

      168,  167,  168,  128,  132,  167,  168,  167,  168,  167,
      168,  167,  168,  135,  167,  168,  138,  167,  168,  167,
      168,  167,  168,  140,  167,  168,  167,  168,  141,  167,
      168,   43,  167,  168,   49,  167,  168,  143,  167,  168,
      167,  168,   53,  167,  168,  167,  168,  167,  168,  152,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  170,  167,
       64,  167,  167,  167,  167,  167,  167,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,   83,  167,  168,   85,  167,  168,  167,  168,   89,

      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,   52,  167,  168,  104,  167,  168,  107,  167,
      168,  167,  168,  167,  168,   29,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  130,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,   54,  167,  168,  167,  168,
      167,  168,  167,  168,   48,  167,  168,  167,  168,  157,
      167,  168,  167,  168,   24,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,   65,  167,  167,   67,
      167,  167,  167,   70,  167,  168,  167,  168,   82,  167,

      168,  167,  168,  167,  168,   13,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  100,  167,
      168,  167,  168,  108,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,   59,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,  137,  167,  168,
       58,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  153,  167,  168,  158,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,   63,  167,  167,  167,  167,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,   99,  167,  168,   51,  167,  168,

      167,  168,  167,  168,  117,  167,  168,  167,  168,   10,
      167,  168,  167,  168,  167,  168,  131,  167,  168,   19,
      167,  168,  167,  168,  167,  168,  167,  168,  148,  167,
      168,   28,  167,  168,  167,  168,  167,  168,  167,  168,
      167,   68,  167,  167,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,   95,  167,  168,   97,  167,  168,
      112,  167,  168,  116,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,  167,  167,  167,  168,   12,  167,
      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,

      168,  167,  168,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  167,  168,  167,  168,   66,  167,  167,
       15,  167,  168,  167,  168,  167,  168,  167,  168,   14,
      167,  168,   20,  167,  168,  167,  168,  167,  168,  167,
      168,  167,  168,  144,  167,  168,  167,  168,   26,  167,
      168,   25,  167,  168,   69,  167,   11,  167,  168,  167,
      168,  167,  168,   18,  167,  168,  167,  168,  167,  168,
      167,  168,   27,  167,  168,  167,  168,  167,  168,   21,
      167,  168,  167,  168,  167,  168,  167,  168,  167,  168,
      167,  168,  167,  168,   16,  167,  168,   17,  167,  168,

      167,  168,   23,  167,  168,  167,  168,   22,  167,  168
    } ;

static yyconst flex_int16_t yy_accept[788] =
    {   0,
        1,    3,    5,    6,    9,   13,   15,   19,   23,   27,
       31,   35,   39,   44,   47,   50,   55,   60,   65,   70,
       75,   79,   84,   89,   94,   99,  104,  109,  114,  119,
      124,  129,  134,  139,  144,  149,  154,  159,  164,  169,
      174,  179,  184,  189,  190,  191,  191,  193,  193,  194,
      194,  197,  198,  199,  199,  200,  200,  200,  202,  204,
      204,  205,  208,  210,  210,  211,  212,  214,  216,  218,
      220,  223,  225,  227,  229,  231,  233,  235,  237,  239,
      241,  243,  246,  248,  250,  252,  254,  256,  258,  260,
      262,  264,  266,  268,  270,  272,  274,  277,  280,  282,

      285,  288,  290,  292,  294,  296,  298,  300,  302,  304,
      306,  308,  311,  313,  315,  317,  319,  321,  323,  325,
      327,  329,  331,  333,  335,  337,  339,  341,  343,  345,
      347,  349,  351,  353,  355,  357,  360,  362,  364,  366,
      368,  370,  372,  374,  376,  378,  380,  381,  381,  383,
      385,  385,  385,  386,  387,  389,  392,  393,  394,  395,
      396,  397,  398,  400,  402,  405,  407,  409,  411,  413,
      415,  417,  419,  421,  423,  425,  427,  429,  431,  433,
      435,  437,  440,  443,  445,  447,  449,  451,  454,  456,
      458,  460,  462,  464,  466,  468,  470,  473,  475,  477,

      479,  482,  485,  488,  490,  492,  494,  496,  498,  500,
      502,  505,  507,  509,  511,  514,  516,  520,  523,  525,
      527,  529,  531,  533,  535,  537,  539,  541,  543,  545,
      547,  549,  551,  553,  555,  557,  559,  561,  563,  565,
      567,  569,  571,  573,  575,  577,  579,  581,  583,  585,
      588,  590,  593,  596,  599,  601,  603,  605,  607,  609,
      612,  615,  617,  619,  621,  623,  625,  627,  630,  632,
      634,  634,  634,  634,  634,  634,  635,  637,  638,  639,
      640,  641,  642,  643,  644,  646,  648,  651,  653,  655,
      657,  659,  662,  664,  667,  669,  671,  673,  675,  677,

      679,  681,  683,  685,  687,  689,  691,  693,  695,  698,
      701,  703,  705,  707,  709,  711,  713,  715,  718,  720,
      723,  725,  727,  729,  731,  733,  735,  737,  740,  742,
      744,  746,  748,  750,  752,  754,  756,  758,  760,  762,
      765,  767,  769,  772,  774,  776,  778,  780,  782,  784,
      786,  788,  791,  793,  795,  797,  799,  801,  803,  806,
      808,  810,  812,  814,  816,  818,  820,  822,  824,  827,
      830,  832,  834,  836,  839,  841,  843,  845,  847,  849,
      851,  853,  856,  858,  861,  863,  866,  868,  870,  870,
      870,  871,  871,  871,  871,  871,  873,  876,  877,  878,

      879,  880,  881,  882,  883,  885,  888,  891,  893,  896,
      898,  901,  904,  907,  910,  912,  915,  917,  919,  921,
      923,  925,  927,  929,  931,  933,  935,  937,  939,  942,
      944,  946,  949,  951,  953,  955,  957,  959,  962,  964,
      968,  970,  972,  974,  976,  978,  980,  982,  984,  986,
      988,  990,  992,  994,  996,  998, 1000, 1002, 1004, 1007,
     1009, 1011, 1013, 1015, 1018, 1020, 1022, 1024, 1027, 1029,
     1031, 1033, 1035, 1037, 1039, 1041, 1043, 1046, 1048, 1050,
     1053, 1056, 1058, 1060, 1063, 1067, 1069, 1071, 1074, 1076,
     1078, 1081, 1083, 1085, 1087, 1090, 1090, 1091, 1091, 1092,

     1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103,
     1106, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125,
     1128, 1130, 1133, 1135, 1138, 1140, 1143, 1145, 1147, 1150,
     1153, 1155, 1157, 1159, 1161, 1164, 1166, 1169, 1171, 1174,
     1176, 1178, 1180, 1183, 1186, 1188, 1191, 1194, 1196, 1198,
     1200, 1202, 1204, 1208, 1210, 1212, 1214, 1217, 1220, 1222,
     1224, 1227, 1229, 1232, 1235, 1238, 1241, 1243, 1246, 1248,
     1250, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269,
     1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1282,
     1284, 1286, 1288, 1290, 1292, 1295, 1298, 1300, 1303, 1305,

     1307, 1309, 1311, 1313, 1316, 1319, 1322, 1324, 1326, 1329,
     1331, 1333, 1335, 1337, 1339, 1341, 1343, 1346, 1348, 1350,
     1352, 1354, 1356, 1359, 1361, 1363, 1365, 1368, 1370, 1373,
     1375, 1378, 1380, 1382, 1384, 1386, 1387, 1389, 1390, 1392,
     1393, 1394, 1397, 1399, 1402, 1404, 1406, 1409, 1411, 1413,
     1415, 1417, 1419, 1422, 1424, 1427, 1429, 1431, 1433, 1435,
     1437, 1440, 1442, 1444, 1446, 1448, 1451, 1454, 1456, 1458,
     1460, 1462, 1465, 1468, 1470, 1472, 1474, 1476, 1478, 1479,
     1480, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1498,
     1501, 1503, 1505, 1508, 1510, 1513, 1515, 1517, 1520, 1523,

     1525, 1527, 1529, 1532, 1535, 1537, 1539, 1541, 1542, 1544,
     1545, 1547, 1549, 1551, 1553, 1555, 1558, 1561, 1564, 1567,
     1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1586,
     1587, 1589, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1606,
     1608, 1610, 1612, 1614, 1616, 1618, 1620, 1621, 1624, 1626,
     1628, 1630, 1633, 1636, 1638, 1640, 1642, 1644, 1647, 1649,
     1652, 1655, 1657, 1660, 1662, 1664, 1667, 1669, 1671, 1673,
     1676, 1678, 1680, 1683, 1685, 1687, 1689, 1691, 1693, 1695,
     1698, 1701, 1703, 1706, 1708, 1711, 1711
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    6,    4,    7,
        7,    8,    9,    7,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   18,   20,   18,    7,    7,    7,
        7,    7,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   30,   31,   32,   33,   34,   35,
       30,   36,   37,   38,   39,   30,   30,   30,   30,   30,
        7,    1,    7,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    7,    1,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        5,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        7,    7,    7,    7,    8,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        7,    7,    7,    7,    8,    7,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[801] =
    {   0,
        0,    0,  841, 2617,   65,   67, 2617,    0, 2617, 2617,
     2617,   60,   95,   59,   72,   71,  750,   76,   78,  132,
       79,  112,   81,  117,  122,  126,  145,  127,  197,   83,
       88,  150,  173,  178,  199,  185,  209,  213,  265,  242,
      193,  227,  152,   98,    0,  285,  744,  108,  776,  295,
      314,  351,  167,  749,    0,    0,  164,  188,  238,  327,
      337,  257,  283,  698,  694,  352,  277,  362,  369,  371,
      327,  311,  377,  379,  381,  383,  386,  390,  392,  388,
      394,  396,  398,  404,  406,  411,  409,  414,  428,  448,
      459,  462,  464,  307,  466,  468,  285,  476,  478,  480,

      482,  484,  488,  486,  491,  494,  497,  499,  504,  508,
      510,  501,  515,  517,  520,  533,  526,  538,  545,  548,
      555,  552,  561,  570,  573,  576,  579,  588,  590,  602,
      592,  605,  607,  609,  612,  626,  630,  633,  635,  639,
      649,  654,  644,  652,  641,  657,  698,  666,  708,  721,
      113,  145,    0,    0,  659,  661,  204,  210,  216,  248,
       70,   86,  670,  665,  673,  684,  734,  697,  736,  738,
      740,  745,  748,  751,  753,  755,  676,  757,  759,  761,
      763,  766,  773,  771,  778,  780,  785,  787,  790,  794,
      800,  810,  812,  814,  817,  827,  829,  832,  838,  844,

      681,  849,  851,  853,  855,  860,  866,  868,  871,  873,
      875,  877,  879,  881,  883,  885,  887,  890,  892,  900,
      906,  908,  910,  912,  917,  921,  923,  925,  930,  932,
      936,  943,  941,  946,  948,  951,  953,  957,  959,  961,
      969,  972,  977,  979,  981,  990,  985,  993,  996, 1005,
     1007, 1013, 1015, 1017, 1019, 1025, 1027, 1032, 1038, 1040,
     1043, 1045, 1047, 1049, 1052, 1055, 1060, 1057, 1063, 1065,
      658,  173,  217,  588,  308,  581, 1067,  123,  157,  399,
      412,  449,   93,  363, 1072, 1074, 1078, 1082, 1084, 1086,
     1088, 1091, 1099, 1101, 1103, 1105, 1108, 1111, 1113, 1116,

     1118, 1121, 1125, 1127, 1133, 1138, 1144, 1146, 1148, 1151,
     1158, 1160, 1164, 1166, 1170, 1172, 1174, 1179, 1181, 1184,
     1187, 1191, 1196, 1198, 1203, 1200, 1205, 1207, 1211, 1213,
     1215, 1218, 1220, 1224, 1228, 1239, 1232, 1241, 1243, 1252,
     1254, 1256, 1259, 1263, 1267, 1269, 1275, 1277, 1279, 1281,
     1286, 1283, 1288, 1291, 1296, 1298, 1302, 1304, 1307, 1309,
     1313, 1315, 1322, 1324, 1327, 1331, 1338, 1335, 1340, 1342,
     1344, 1351, 1354, 1362, 1364, 1366, 1369, 1374, 1377, 1380,
     1382, 1385, 1387, 1389, 1391, 1393, 1399, 1395,  420,  439,
     2617,  454,  472,  521,  561, 2617, 1404,  252,  191,  324,

      269,  424,  539,  527, 1407, 1409, 1411, 1415, 1417, 1419,
     1424, 1427, 1431, 1434, 1439, 1441, 1445, 1447, 1449, 1451,
     1453, 1455, 1458, 1460, 1462, 1467, 1470, 1472, 1475, 1477,
     1481, 1483, 1485, 1487, 1492, 1496, 1504, 1511, 1513, 1515,
     1517, 1519, 1521, 1530, 1532, 1534, 1536, 1539, 1541, 1543,
     1547, 1551, 1553, 1556, 1559, 1561, 1564, 1566, 1569, 1574,
     1579, 1584, 1587, 1592, 1594, 1600, 1602, 1606, 1608, 1615,
     1618, 1622, 1625, 1627, 1629, 1631, 1633, 1635, 1638, 1640,
     1642, 1645, 1653, 1649, 1655, 1661, 1663, 1667, 1669, 1676,
     1671, 1678, 1682, 1690, 1692,  573,  545,  613, 2617,  491,

      452,  619,  505,  566,  662,  598,  718,  743, 1694, 1696,
     1698, 1701, 1703, 1705, 1708, 1711, 1716, 1718, 1722, 1724,
     1729, 1731, 1733, 1739, 1741, 1743, 1748, 1755, 1760, 1762,
     1764, 1767, 1769, 1773, 1775, 1779, 1781, 1784, 1786, 1788,
     1792, 1794, 1790, 1799, 1802, 1804, 1808, 1810, 1815, 1826,
     1828, 1830, 1834, 1836, 1838, 1842, 1844, 1847, 1850, 1853,
     1855, 1858, 1860, 1864, 1866, 1870, 1874, 1878, 1882, 1884,
     1890, 1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906,  443,
      792,  401,  795,  749, 1123,  623,  685, 1908, 1911, 1913,
     1915, 1925, 1928, 1921, 1923, 1930, 1932, 1934, 1941, 1943,

     1951, 1953, 1961, 1966, 1968, 1970, 1977, 1979, 1981, 1985,
     1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2007, 2009,
     2011, 2013, 2015, 2017, 2027, 2031, 2035, 2039, 2041, 2043,
     2046, 2050, 2052, 2054, 2060, 1264,  366,  833,  312, 1270,
      893, 2062, 2065, 2067, 2069, 2076, 2079, 2081, 2083, 2085,
     2088, 2090, 2092, 2094, 2101, 2103, 2105, 2107, 2110, 2117,
     2115, 2122, 2126, 2130, 2134, 2136, 2139, 2143, 2145, 2148,
     2154, 2156, 2158, 2160, 2165, 2167, 2170,  262,  489, 1316,
      568, 2172, 2176, 2179, 2181, 2183, 2188, 2190, 2192, 2194,
     2196, 2199, 2201, 2205, 2211, 2216, 2218, 2220, 2229, 2231,

     2233, 2237, 2239, 2241, 2243, 2249, 2251, 1319,  222,  914,
     2253, 2255, 2257, 2259, 2261, 2265, 2267, 2269, 2271, 2273,
     2275, 2277, 2282, 2284, 2286, 2298, 2300, 2302, 1371, 1493,
     2304, 2306, 2313, 2315, 2318, 2322, 2324, 2335, 2331, 2338,
     2326, 2343, 2340, 2347, 2349,   91, 1684, 2351, 2353, 2355,
     2360, 2365, 2370, 2375, 2378, 2380, 2383, 2385, 2389, 2392,
     2394,   72, 2396, 2398, 2402, 2404, 2407, 2412, 2414, 2416,
     2419, 2421, 2425, 2427, 2431, 2434, 2436, 2438, 2440, 2443,
     2445, 2448, 2455, 2457, 2459, 2617, 2522, 2527, 2532, 2538,
     2543, 2550, 2551, 2559, 2568, 2572, 2580, 2589, 2598, 2607

    } ;

static yyconst flex_int16_t yy_def[801] =
    {   0,
      786,    1,  786,  786,  786,  786,  786,  787,  786,  786,
      786,  788,  789,  786,  786,  788,   16,  790,  790,  790,
      791,  790,  790,  790,  790,   20,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  786,  787,  786,   16,  792,  789,  789,
      789,  789,  793,  794,  795,  796,  790,  790,  790,  786,
      789,   20,  790,  791,  791,  791,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  786,  789,  789,  789,
      797,  798,  795,  796,  790,  790,  791,  791,  791,  791,
      791,  791,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      797,  799,  797,  798,  800,  786,  790,  791,  791,  791,
      791,  791,  791,  791,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  797,  797,
      786,  797,  800,  798,  798,  786,  790,  791,  791,  791,

      791,  791,  791,  791,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  786,  786,  798,  786,  786,

      786,  791,  791,  791,  791,  791,  791,  791,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  786,
      791,  791,  791,  791,  791,  791,  791,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  791,  791,  791,  791,  791,
      791,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  791,  791,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  791,  791,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  791,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,    0,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786

    } ;

static yyconst flex_int16_t yy_nxt[2684] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       18,   19,   18,   18,   20,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   21,
       22,   23,   24,   25,   26,   27,   28,   18,   29,   30,
       18,   31,   32,   33,   34,   35,   18,   36,   37,   38,
       39,   40,   41,   42,   43,   18,   44,   44,   44,   44,
       46,   53,   53,   53,   53,   53,   53,   53,   53,   54,
       64,   46,   64,   55,   48,   49,   57,   49,   57,   64,
       49,   57,   49,   57,  283,   48,   64,   49,   57,   44,

       44,   64,   59,   64,   48,   50,  284,   51,   51,   51,
       51,   51,   51,   51,   51,   48,   60,   60,   66,   52,
      272,   49,   57,  102,  273,   72,   49,   57,  103,   73,
      403,   49,   57,   64,   56,   74,   49,   57,   75,   52,
       60,   61,   57,  398,   62,   62,   62,   62,   62,   62,
       62,   62,  275,   67,   49,   57,  276,   76,   58,   49,
       57,   49,   57,   68,   63,   69,   81,   64,   77,   70,
       71,   78,   79,   49,  786,   80,   82,   84,   92,   85,
      390,   93,   49,   57,  391,   87,   83,   49,   57,   86,
      104,   48,  399,   88,   49,   57,   89,   49,   57,   90,

      146,   64,   49,   57,  105,   91,   49,   57,   49,   57,
       94,   48,   95,  106,   64,   96,   97,  107,   49,   57,
       64,  108,   49,   57,  272,  119,   64,  109,  392,  120,
      503,  110,   64,  111,  278,  112,   49,   57,  279,  113,
      142,  143,   98,  114,  280,  121,  115,   49,   57,   99,
      100,   49,   57,  122,  281,  101,  116,  123,   64,  117,
      129,  124,   64,  118,  155,  786,   49,  130,  125,  126,
      131,  127,   64,  128,   49,   57,  282,  132,  133,   64,
      134,  144,  139,  135,  136,  145,   49,   57,  502,   58,
      140,  505,   49,   57,   49,   57,  141,   53,   53,   53,

       53,   53,   53,   53,   53,  786,  156,  149,  149,  149,
      149,  149,  149,  149,  149,  395,   49,   57,  137,  396,
       49,   57,   64,  138,   50,  201,   51,   51,   51,   51,
       51,   51,   51,   51,   64,  163,   49,   57,   52,  147,
      147,  147,  147,  147,  147,  147,  147,  148,  504,  150,
      150,  150,  150,  150,  150,  150,  150,  169,   52,   60,
       61,  148,   64,  150,  150,  150,  150,  150,  150,  150,
      150,   49,   57,   64,  157,  158,   64,  159,   49,   57,
       49,   57,  160,  161,  162,  168,   49,   57,   49,   57,
       49,   57,   49,   57,  404,   49,   57,   49,   57,   49,

       57,   49,   57,   49,   57,   49,   57,   49,   57,   64,
      164,   64,  165,   49,   57,   49,   57,  166,   49,   57,
       49,   57,   64,   49,   57,  172,  175,  272,  167,  400,
      170,  496,  177,  171,   64,  180,  181,   49,   57,  182,
      176,  173,  174,  178,  401,  183,  272,  179,  506,  188,
      497,  185,  186,  191,  394,  192,  184,   49,   57,   64,
      194,  272,  187,  394,  189,  392,  190,  195,   49,   57,
      193,   49,   57,   49,   57,   49,   57,   49,   57,  498,
      202,  402,  196,  499,  203,   49,   57,   49,   57,   49,
       57,   49,   57,   49,   57,   49,   57,   49,   57,   64,

       49,   57,  394,   49,   57,  197,   49,   57,   49,   57,
       49,   57,  198,   49,   57,   64,  199,   49,   57,   49,
       57,  708,  205,  200,   49,   57,   49,   57,  393,   49,
       57,  206,  500,  204,  212,   49,   57,   64,  207,  208,
      210,  211,   49,   57,  582,  209,  213,   49,   57,   64,
      217,  508,  219,  214,   49,   57,  389,   49,   57,  215,
      216,   49,   57,  218,   49,   57,  507,  226,  275,  220,
       49,   57,  501,  221,  222,  223,   64,  227,   64,   49,
       57,  224,   49,   57,  389,   49,   57,  225,   49,   57,
      710,  229,  394,  228,  230,  393,  234,   49,   57,   49,

       57,   49,   57,  235,  231,  583,  232,  233,   64,  236,
      238,   49,   57,  239,   49,   57,   49,   57,   49,   57,
      393,   49,   57,  253,  580,  252,  237,  242,  254,   64,
      240,  241,  248,   64,  244,   49,   57,  585,  245,   49,
       57,  243,   49,   57,   49,   57,  640,  246,   49,   57,
       49,   57,  249,   49,   57,  581,  250,  247,   49,   57,
      251,   49,   57,   49,   57,  272,   49,   57,   49,   57,
       49,   57,   64,  255,   49,   57,  786,  260,  256,   49,
       57,  257,   49,   57,  269,   49,   57,  277,  258,  259,
       49,   57,  261,   49,   57,   64,  262,  263,  265,  584,

      264,  270,  266,  267,   64,  286,   49,   57,  786,  268,
      147,  147,  147,  147,  147,  147,  147,  147,  148,  641,
      149,  149,  149,  149,  149,  149,  149,  149,   64,  285,
      298,  148,   52,  150,  150,  150,  150,  150,  150,  150,
      150,  289,  287,   49,   57,   49,   57,   49,   57,   49,
       57,  586,   52,   64,   49,   57,  152,   49,   57,   64,
       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,  288,   49,   57,  638,  291,  587,
       49,   57,   49,   57,  290,  293,  148,   49,   57,   49,
       57,  292,  294,  295,   49,   57,   49,   57,  301,   49,

       57,  302,   64,   49,   57,   64,  304,  786,  297,   49,
       57,  296,  307,  786,  303,  299,  300,  305,  308,   49,
       57,   49,   57,   49,   57,  309,   49,   57,  306,  310,
      312,  636,  313,  311,  637,  314,   49,   57,   49,   57,
      786,   49,   57,   64,  319,  315,  318,   49,   57,  316,
      317,  786,  320,   49,   57,  786,  321,  323,   49,   57,
       49,   57,   49,   57,   49,   57,  679,  324,  786,   49,
       57,  786,  322,  325,  326,   49,   57,   49,   57,  327,
       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,  328,   49,

       57,   49,   57,   64,  329,  786,  331,  330,  332,   49,
       57,  335,  334,  681,  336,   49,   57,   49,   57,   49,
       57,   49,   57,  338,   64,  333,   49,   57,  786,  339,
       49,   57,   49,   57,   49,   57,  786,  337,  730,   49,
       57,   49,   57,  786,  340,   49,   57,  786,  342,  345,
       49,   57,   49,   57,  341,   49,   57,   49,   57,  344,
       49,   57,   49,   57,  343,  346,   49,   57,   49,   57,
       49,   57,  349,  347,  786,  350,  348,  786,   49,   57,
      353,   49,   57,  351,  352,  355,   49,   57,   49,   57,
       49,   57,  786,  359,   49,   57,  354,  361,  356,   49,

       57,  357,   49,   57,  786,   49,   57,  786,  362,  364,
      358,  786,  360,  366,   49,   57,   49,   57,  363,  368,
      786,  365,   49,   57,   49,   57,   49,   57,   49,   57,
      786,  367,  369,  372,   49,   57,   49,   57,  786,  370,
      374,   49,   57,  786,  371,  786,  373,   49,   57,   49,
       57,  375,   49,   57,   49,   57,   49,   57,   49,   57,
      786,   49,   57,  376,   49,   57,   49,   57,  786,   49,
       57,  378,   49,   57,   49,   57,   49,   57,  786,  377,
      379,   49,   57,   49,   57,  786,  380,   49,   57,  383,
      382,   49,   57,   49,   57,   49,   57,   49,   57,  397,

       49,   57,  387,  786,  381,  384,  385,  386,   49,   57,
       49,   57,   49,   57,   49,   57,  388,   49,   57,  786,
       49,   57,   49,   57,  786,   49,   57,   49,   57,  405,
       49,   57,  406,   64,   49,   57,   49,   57,  786,  409,
      786,  408,   49,   57,  786,  410,  407,   49,   57,  411,
      412,  415,  414,   49,   57,   49,   57,   49,   57,  786,
       49,   57,  639,  413,  417,  422,  418,   49,   57,   49,
       57,  419,  416,   49,   57,   49,   57,  420,  421,   49,
       57,   49,   57,   49,   57,  425,  786,  423,   49,   57,
       49,   57,  424,   49,   57,  426,   49,   57,  427,  428,

       49,   57,  786,  429,  430,   49,   57,   49,   57,   49,
       57,  432,   49,   57,   49,   57,   49,   57,  431,  434,
       49,   57,   49,   57,   49,   57,  786,   49,   57,   49,
       57,  435,  433,   49,   57,  438,  436,   49,   57,  786,
      437,   49,   57,  441,  786,  443,  786,  439,   49,   57,
       49,   57,   49,   57,  786,  444,  786,  440,  786,  442,
      448,   49,   57,   49,   57,   49,   57,  450,   49,   57,
      445,  447,   49,   57,   64,  446,   49,   57,   49,   57,
       64,  449,  451,  452,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,  455,   49,   57,   49,   57,  453,

       49,   57,  457,  678,  454,   49,   57,   49,   57,  680,
      456,   49,   57,   49,   57,  460,   49,   57,   49,   57,
      458,  461,   49,   57,   49,   57,   64,  462,  459,   64,
      464,   49,   57,   49,   57,  463,   49,   57,  786,  466,
       49,   57,  786,  470,   49,   57,  465,   49,   57,   49,
       57,   49,   57,   49,   57,  709,  467,  471,  729,  469,
       49,   57,  468,   49,   57,  786,  473,  472,  786,  476,
      474,   49,   57,   49,   57,   49,   57,  475,   49,   57,
      478,   64,  479,   49,   57,  786,   49,   57,  477,   49,
       57,   49,   57,  481,   49,   57,   49,   57,   49,   57,

       49,   57,   49,   57,   49,   57,  480,  483,   49,   57,
      746,  484,  482,   49,   57,  786,   49,   57,   49,   57,
       49,   57,  485,  487,   49,   57,   49,   57,   49,   57,
      786,  488,  486,   49,   57,  491,   49,   57,  495,  492,
       49,   57,  489,   49,   57,  786,  490,  509,   49,   57,
       49,   57,  493,  494,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,  786,   49,   57,   49,
       57,   49,   57,  786,  510,  786,   49,   57,  512,   49,
       57,   49,   57,  511,   49,   57,   49,   57,  786,  515,
       49,   57,   49,   57,   49,   57,   49,   57,  513,  786,

      514,   49,   57,   64,  520,   49,   57,  786,  517,  519,
      521,  522,  518,   49,   57,  516,  786,  524,  523,  525,
       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,  747,  527,  786,  528,  529,  786,  526,   49,
       57,   49,   57,   49,   57,   49,   57,  531,   49,   57,
       49,   57,   49,   57,  786,  530,   49,   57,  786,  533,
       49,   57,   49,   57,  532,   49,   57,  534,   49,   57,
       49,   57,  535,   49,   57,   49,   57,  538,   49,   57,
      539,  786,  536,   49,   57,  786,  541,  543,   49,   57,
      786,  537,  540,   49,   57,  544,   49,   57,  542,  786,

      546,   49,   57,   49,   57,  786,  550,  786,  545,   49,
       57,   49,   57,  786,  548,   49,   57,   49,   57,  549,
      786,  552,  786,  547,   49,   57,  553,   49,   57,  786,
      554,   49,   57,  551,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,  557,   49,   57,   49,
       57,   49,   57,  555,   49,   57,  786,  556,   49,   57,
      560,  558,   49,   57,   49,   57,  786,  561,  559,  563,
       49,   57,   49,   57,  786,  564,   49,   57,   49,   57,
       49,   57,  566,  786,  562,   49,   57,   49,   57,  786,
      565,   49,   57,  569,   64,  567,  786,  570,  568,   49,

       57,   49,   57,   49,   57,   49,   57,   49,   57,  573,
       49,   57,   49,   57,   49,   57,  572,   49,   57,  571,
       49,   57,  577,  762,  574,   49,   57,   49,   57,  575,
      578,   49,   57,   49,   57,  786,  588,  576,   49,   57,
       49,   57,   49,   57,  786,  579,  786,  591,   49,   57,
       49,   57,   49,   57,  786,  594,  589,   49,   57,  786,
      592,  786,  595,  590,   49,   57,  593,  786,  597,   49,
       57,   49,   57,   49,   57,  598,   49,   57,   49,   57,
      786,  596,   49,   57,   49,   57,  786,  600,   49,   57,
       49,   57,  599,   49,   57,   49,   57,   49,   57,   49,

       57,   49,   57,   49,   57,  786,  602,  601,   49,   57,
      603,   49,   57,   49,   57,  786,  606,   49,   57,   49,
       57,  786,  604,  608,   49,   57,  786,  607,  609,  786,
      610,  605,  611,  786,  612,   49,   57,   49,   57,   49,
       57,  786,  613,   49,   57,   49,   57,   49,   57,  786,
      614,   49,   57,   49,   57,  615,   49,   57,  786,   49,
       57,  786,   49,   57,   49,   57,  786,   49,   57,   49,
       57,  786,  617,   49,   57,   49,   57,  786,  616,   49,
       57,  786,  620,   49,   57,  786,  621,   49,   57,  618,
      622,   49,   57,   49,   57,  786,  619,  623,  624,   49,

       57,   49,   57,   49,   57,   49,   57,   49,   57,   49,
       57,   49,   57,   49,   57,   49,   57,   49,   57,  786,
       49,   57,   49,   57,   49,   57,  626,  786,  625,  627,
       49,   57,   49,   57,   49,   57,  628,   49,   57,   49,
       57,   49,   57,   49,   57,  629,  786,  630,  786,  631,
       49,   57,   49,   57,  633,  634,  786,  644,  786,  632,
       49,   57,   49,   57,  786,  635,  645,  642,  643,  646,
       49,   57,  647,  786,  648,   49,   57,   49,   57,   49,
       57,  650,  786,  651,  786,  649,   49,   57,   49,   57,
       49,   57,  786,  652,   49,   57,  786,  653,   49,   57,

       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,  786,  654,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,  786,  657,
      655,  658,  656,  659,  786,  660,   49,   57,  786,  662,
       49,   57,  786,  663,   49,   57,  661,  664,   49,   57,
       49,   57,   49,   57,  667,   49,   57,  786,  665,   49,
       57,   49,   57,   49,   57,  668,  666,  786,  669,   49,
       57,   49,   57,  786,   49,   57,   49,   57,   49,   57,
      670,  786,  672,  786,  671,   49,   57,  673,   49,   57,
       49,   57,   49,   57,   49,   57,  675,   49,   57,   49,

       57,   49,   57,   49,   57,  676,  786,  674,  677,  682,
       49,   57,   49,   57,   49,   57,   49,   57,  786,   49,
       57,  685,  786,  686,   49,   57,   49,   57,  786,  683,
      688,   49,   57,  786,  684,   49,   57,  689,  786,   49,
       57,  786,  687,   49,   57,   49,   57,  690,   49,   57,
      786,  693,   49,   57,   49,   57,  786,   49,   57,  692,
      694,  695,  691,   49,   57,   49,   57,   49,   57,   49,
       57,  786,  696,  698,   49,   57,   49,   57,  699,   49,
       57,   49,   57,  786,  697,   49,   57,  700,   49,   57,
       49,   57,   49,   57,  786,  701,  702,   49,   57,   49,

       57,   49,   57,   49,   57,   49,   57,  706,   49,   57,
       49,   57,  786,  703,   49,   57,  786,  711,  704,  712,
       49,   57,  786,  705,  707,   49,   57,   49,   57,   49,
       57,  786,  716,  714,  713,  715,  786,  717,   49,   57,
       49,   57,   49,   57,  719,  720,   49,   57,   49,   57,
       49,   57,   49,   57,  718,  786,  721,  786,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,   49,   57,
       49,   57,  724,  722,   49,   57,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,   49,   57,  786,  723,
      727,   49,   57,   49,   57,   49,   57,  733,  726,  732,

      786,  731,  725,  734,  728,  735,  786,   49,   57,   49,
       57,   49,   57,   49,   57,   49,   57,  738,  786,  736,
      786,  737,   49,   57,   49,   57,  740,   49,   57,  786,
      742,   49,   57,   49,   57,   49,   57,  739,  743,  741,
       49,   57,  745,  786,   49,   57,  786,   49,   57,   49,
       57,  744,   49,   57,  786,  749,   49,   57,   49,   57,
       49,   57,   49,   57,   49,   57,  752,  748,  753,   49,
       57,  755,  786,  750,   49,   57,  751,  754,  756,   49,
       57,  786,  759,  757,   49,   57,  758,   49,   57,   49,
       57,  760,   49,   57,   49,   57,  786,  763,   49,   57,

      761,   49,   57,   49,   57,   49,   57,   49,   57,  786,
      764,   49,   57,   49,   57,  765,   49,   57,  786,  766,
      767,   49,   57,   49,   57,   49,   57,  769,   49,   57,
       49,   57,  786,  770,   49,   57,   49,   57,  771,  768,
       49,   57,  772,   49,   57,   49,   57,   49,   57,   49,
       57,  773,   49,   57,   49,   57,  774,   49,   57,  775,
      786,  776,  786,  777,   49,   57,   49,   57,   49,   57,
      786,  786,  786,  778,  786,  786,  786,  786,  780,  779,
      781,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  782,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  783,  786,  784,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  785,   45,  786,   45,   45,   45,   45,   45,   45,
       45,   47,   47,  786,   47,   49,   49,   49,   49,   49,
       49,   58,   58,   58,   58,   58,   58,   65,   65,   65,
       65,   65,  147,  147,  786,  147,   53,  786,   53,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  153,  786,
      153,  153,  153,  153,  153,  153,  153,  154,  154,  154,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  394,  394,  394,
      394,  394,  394,  394,  394,  394,    3,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786
    } ;

static yyconst flex_int16_t yy_chk[2684] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    6,
       12,   14,   14,   14,   14,   14,   14,   14,   14,   15,
      161,   16,  762,   15,   12,   18,   18,   19,   19,   21,
       23,   23,   30,   30,  161,   16,  162,   31,   31,   44,

       44,  746,   19,  283,   12,   13,  162,   13,   13,   13,
       13,   13,   13,   13,   13,   16,   48,   48,   21,   13,
      151,   22,   22,   30,  151,   23,   24,   24,   31,   23,
      283,   25,   25,  278,   16,   23,   28,   28,   23,   13,
       20,   20,   20,  278,   20,   20,   20,   20,   20,   20,
       20,   20,  152,   22,   27,   27,  152,   24,   26,   32,
       32,   43,   43,   22,   20,   22,   25,  279,   24,   22,
       22,   24,   24,   57,   57,   24,   25,   26,   28,   26,
      272,   28,   33,   33,  272,   27,   25,   34,   34,   26,
       32,   53,  279,   27,   36,   36,   27,   58,   58,   27,

       43,  399,   41,   41,   32,   27,   29,   29,   35,   35,
       29,   53,   29,   33,  157,   29,   29,   33,   37,   37,
      158,   33,   38,   38,  273,   36,  159,   33,  273,   36,
      399,   34,  709,   34,  157,   34,   42,   42,  158,   35,
       41,   41,   29,   35,  159,   36,   35,   59,   59,   29,
       29,   40,   40,   37,  159,   29,   35,   37,  160,   35,
       38,   37,  398,   35,   59,   62,   62,   38,   37,   37,
       38,   37,  678,   37,   39,   39,  160,   38,   39,  401,
       39,   42,   40,   39,   39,   42,   67,   67,  398,   62,
       40,  401,   63,   63,   97,   97,   40,   46,   46,   46,

       46,   46,   46,   46,   46,   50,   63,   50,   50,   50,
       50,   50,   50,   50,   50,  275,   94,   94,   39,  275,
       72,   72,  639,   39,   51,   94,   51,   51,   51,   51,
       51,   51,   51,   51,  400,   67,   71,   71,   51,   60,
       60,   60,   60,   60,   60,   60,   60,   61,  400,   61,
       61,   61,   61,   61,   61,   61,   61,   72,   51,   52,
       52,   52,   66,   52,   52,   52,   52,   52,   52,   52,
       52,   68,   68,  284,   66,   66,  637,   66,   69,   69,
       70,   70,   66,   66,   66,   71,   73,   73,   74,   74,
       75,   75,   76,   76,  284,   77,   77,   80,   80,   78,

       78,   79,   79,   81,   81,   82,   82,   83,   83,  280,
       68,  582,   69,   84,   84,   85,   85,   70,   87,   87,
       86,   86,  281,   88,   88,   75,   77,  389,   70,  280,
       73,  389,   78,   74,  402,   80,   81,   89,   89,   81,
       77,   76,   76,   78,  281,   81,  390,   79,  402,   85,
      390,   83,   84,   86,  580,   86,   82,   90,   90,  282,
       87,  392,   84,  501,   85,  392,   85,   88,   91,   91,
       86,   92,   92,   93,   93,   95,   95,   96,   96,  393,
       95,  282,   89,  393,   96,   98,   98,   99,   99,  100,
      100,  101,  101,  102,  102,  104,  104,  103,  103,  679,

      105,  105,  500,  106,  106,   90,  107,  107,  108,  108,
      112,  112,   91,  109,  109,  503,   92,  110,  110,  111,
      111,  679,  100,   93,  113,  113,  114,  114,  394,  115,
      115,  100,  394,   99,  105,  117,  117,  404,  100,  100,
      103,  104,  116,  116,  503,  102,  106,  118,  118,  403,
      108,  404,  110,  106,  119,  119,  497,  120,  120,  107,
      107,  122,  122,  109,  121,  121,  403,  117,  395,  111,
      123,  123,  395,  113,  114,  115,  504,  118,  681,  124,
      124,  116,  125,  125,  496,  126,  126,  116,  127,  127,
      681,  120,  276,  119,  120,  274,  121,  128,  128,  129,

      129,  131,  131,  122,  120,  504,  120,  120,  506,  122,
      124,  130,  130,  125,  132,  132,  133,  133,  134,  134,
      498,  135,  135,  134,  498,  133,  123,  127,  135,  502,
      125,  126,  131,  586,  129,  136,  136,  506,  129,  137,
      137,  128,  138,  138,  139,  139,  586,  129,  140,  140,
      145,  145,  131,  143,  143,  502,  131,  130,  141,  141,
      132,  144,  144,  142,  142,  271,  146,  146,  155,  155,
      156,  156,  505,  137,  164,  164,  148,  138,  137,  163,
      163,  137,  165,  165,  145,  177,  177,  155,  137,  137,
      201,  201,  139,  166,  166,  587,  140,  141,  142,  505,

      141,  146,  142,  143,   65,  164,  168,  168,   64,  144,
      147,  147,  147,  147,  147,  147,  147,  147,  149,  587,
      149,  149,  149,  149,  149,  149,  149,  149,  507,  163,
      177,  150,  149,  150,  150,  150,  150,  150,  150,  150,
      150,  168,  166,  167,  167,  169,  169,  170,  170,  171,
      171,  507,  149,  508,  172,  172,   54,  173,  173,  584,
      174,  174,  175,  175,  176,  176,  178,  178,  179,  179,
      180,  180,  181,  181,  167,  182,  182,  584,  170,  508,
      184,  184,  183,  183,  169,  172,   49,  185,  185,  186,
      186,  171,  173,  174,  187,  187,  188,  188,  179,  189,

      189,  180,  581,  190,  190,  583,  182,   47,  176,  191,
      191,  175,  184,   17,  181,  178,  178,  183,  185,  192,
      192,  193,  193,  194,  194,  186,  195,  195,  183,  187,
      188,  581,  188,  187,  583,  188,  196,  196,  197,  197,
        3,  198,  198,  638,  191,  188,  190,  199,  199,  188,
      189,    0,  192,  200,  200,    0,  193,  195,  202,  202,
      203,  203,  204,  204,  205,  205,  638,  196,    0,  206,
      206,    0,  194,  197,  198,  207,  207,  208,  208,  199,
      209,  209,  210,  210,  211,  211,  212,  212,  213,  213,
      214,  214,  215,  215,  216,  216,  217,  217,  200,  218,

      218,  219,  219,  641,  204,    0,  205,  204,  206,  220,
      220,  209,  208,  641,  210,  221,  221,  222,  222,  223,
      223,  224,  224,  213,  710,  207,  225,  225,    0,  214,
      226,  226,  227,  227,  228,  228,    0,  212,  710,  229,
      229,  230,  230,    0,  216,  231,  231,    0,  220,  223,
      233,  233,  232,  232,  219,  234,  234,  235,  235,  222,
      236,  236,  237,  237,  221,  224,  238,  238,  239,  239,
      240,  240,  226,  224,    0,  227,  225,    0,  241,  241,
      230,  242,  242,  228,  229,  232,  243,  243,  244,  244,
      245,  245,    0,  235,  247,  247,  231,  237,  233,  246,

      246,  233,  248,  248,    0,  249,  249,    0,  238,  240,
      234,    0,  236,  241,  250,  250,  251,  251,  239,  243,
        0,  240,  252,  252,  253,  253,  254,  254,  255,  255,
        0,  242,  244,  247,  256,  256,  257,  257,    0,  245,
      249,  258,  258,    0,  246,    0,  248,  259,  259,  260,
      260,  251,  261,  261,  262,  262,  263,  263,  264,  264,
        0,  265,  265,  255,  266,  266,  268,  268,    0,  267,
      267,  257,  269,  269,  270,  270,  277,  277,    0,  256,
      258,  285,  285,  286,  286,    0,  259,  287,  287,  264,
      263,  288,  288,  289,  289,  290,  290,  291,  291,  277,

      292,  292,  269,    0,  262,  265,  266,  267,  293,  293,
      294,  294,  295,  295,  296,  296,  270,  297,  297,    0,
      298,  298,  299,  299,    0,  300,  300,  301,  301,  285,
      302,  302,  286,  585,  303,  303,  304,  304,    0,  290,
        0,  289,  305,  305,    0,  291,  288,  306,  306,  293,
      295,  298,  297,  307,  307,  308,  308,  309,  309,    0,
      310,  310,  585,  296,  300,  303,  301,  311,  311,  312,
      312,  301,  299,  313,  313,  314,  314,  301,  302,  315,
      315,  316,  316,  317,  317,  306,    0,  304,  318,  318,
      319,  319,  305,  320,  320,  307,  321,  321,  308,  310,

      322,  322,    0,  311,  312,  323,  323,  324,  324,  326,
      326,  314,  325,  325,  327,  327,  328,  328,  313,  316,
      329,  329,  330,  330,  331,  331,    0,  332,  332,  333,
      333,  317,  315,  334,  334,  322,  319,  335,  335,    0,
      321,  337,  337,  325,    0,  327,    0,  323,  336,  336,
      338,  338,  339,  339,    0,  329,    0,  324,    0,  326,
      333,  340,  340,  341,  341,  342,  342,  335,  343,  343,
      330,  332,  344,  344,  636,  331,  345,  345,  346,  346,
      640,  334,  336,  337,  347,  347,  348,  348,  349,  349,
      350,  350,  352,  352,  341,  351,  351,  353,  353,  338,

      354,  354,  344,  636,  339,  355,  355,  356,  356,  640,
      342,  357,  357,  358,  358,  347,  359,  359,  360,  360,
      345,  348,  361,  361,  362,  362,  680,  349,  346,  708,
      351,  363,  363,  364,  364,  350,  365,  365,    0,  354,
      366,  366,    0,  358,  368,  368,  353,  367,  367,  369,
      369,  370,  370,  371,  371,  680,  355,  360,  708,  357,
      372,  372,  356,  373,  373,    0,  362,  361,    0,  365,
      363,  374,  374,  375,  375,  376,  376,  364,  377,  377,
      367,  729,  368,  378,  378,    0,  379,  379,  366,  380,
      380,  381,  381,  372,  382,  382,  383,  383,  384,  384,

      385,  385,  386,  386,  388,  388,  371,  375,  387,  387,
      729,  376,  373,  397,  397,    0,  405,  405,  406,  406,
      407,  407,  377,  379,  408,  408,  409,  409,  410,  410,
        0,  380,  378,  411,  411,  385,  412,  412,  388,  387,
      413,  413,  381,  414,  414,    0,  383,  405,  415,  415,
      416,  416,  387,  387,  417,  417,  418,  418,  419,  419,
      420,  420,  421,  421,  422,  422,    0,  423,  423,  424,
      424,  425,  425,    0,  408,    0,  426,  426,  415,  427,
      427,  428,  428,  410,  429,  429,  430,  430,    0,  419,
      431,  431,  432,  432,  433,  433,  434,  434,  417,    0,

      418,  435,  435,  730,  424,  436,  436,    0,  421,  423,
      425,  426,  422,  437,  437,  420,    0,  428,  427,  430,
      438,  438,  439,  439,  440,  440,  441,  441,  442,  442,
      443,  443,  730,  433,    0,  434,  435,    0,  431,  444,
      444,  445,  445,  446,  446,  447,  447,  437,  448,  448,
      449,  449,  450,  450,    0,  436,  451,  451,    0,  441,
      452,  452,  453,  453,  439,  454,  454,  442,  455,  455,
      456,  456,  443,  457,  457,  458,  458,  446,  459,  459,
      447,    0,  444,  460,  460,    0,  449,  451,  461,  461,
        0,  445,  448,  462,  462,  452,  463,  463,  450,    0,

      454,  464,  464,  465,  465,    0,  458,    0,  453,  466,
      466,  467,  467,    0,  456,  468,  468,  469,  469,  457,
        0,  461,    0,  455,  470,  470,  462,  471,  471,    0,
      463,  472,  472,  460,  473,  473,  474,  474,  475,  475,
      476,  476,  477,  477,  478,  478,  467,  479,  479,  480,
      480,  481,  481,  465,  482,  482,    0,  466,  484,  484,
      471,  469,  483,  483,  485,  485,    0,  472,  470,  474,
      486,  486,  487,  487,    0,  475,  488,  488,  489,  489,
      491,  491,  478,    0,  473,  490,  490,  492,  492,    0,
      476,  493,  493,  482,  747,  479,    0,  483,  480,  494,

      494,  495,  495,  509,  509,  510,  510,  511,  511,  489,
      512,  512,  513,  513,  514,  514,  487,  515,  515,  486,
      516,  516,  493,  747,  490,  517,  517,  518,  518,  492,
      493,  519,  519,  520,  520,    0,  509,  492,  521,  521,
      522,  522,  523,  523,    0,  494,    0,  514,  524,  524,
      525,  525,  526,  526,    0,  517,  512,  527,  527,    0,
      515,    0,  518,  513,  528,  528,  516,    0,  521,  529,
      529,  530,  530,  531,  531,  523,  532,  532,  533,  533,
        0,  519,  534,  534,  535,  535,    0,  526,  536,  536,
      537,  537,  525,  538,  538,  539,  539,  540,  540,  543,

      543,  541,  541,  542,  542,    0,  528,  527,  544,  544,
      530,  545,  545,  546,  546,    0,  533,  547,  547,  548,
      548,    0,  531,  536,  549,  549,    0,  534,  538,    0,
      540,  532,  541,    0,  542,  550,  550,  551,  551,  552,
      552,    0,  545,  553,  553,  554,  554,  555,  555,    0,
      548,  556,  556,  557,  557,  549,  558,  558,    0,  559,
      559,    0,  560,  560,  561,  561,    0,  562,  562,  563,
      563,    0,  551,  564,  564,  565,  565,    0,  550,  566,
      566,    0,  555,  567,  567,    0,  556,  568,  568,  552,
      559,  569,  569,  570,  570,    0,  554,  560,  562,  571,

      571,  572,  572,  573,  573,  574,  574,  575,  575,  576,
      576,  577,  577,  578,  578,  579,  579,  588,  588,    0,
      589,  589,  590,  590,  591,  591,  569,    0,  567,  570,
      594,  594,  595,  595,  592,  592,  572,  593,  593,  596,
      596,  597,  597,  598,  598,  573,    0,  574,    0,  575,
      599,  599,  600,  600,  577,  578,    0,  590,    0,  576,
      601,  601,  602,  602,    0,  579,  591,  588,  589,  592,
      603,  603,  593,    0,  594,  604,  604,  605,  605,  606,
      606,  599,    0,  600,    0,  597,  607,  607,  608,  608,
      609,  609,    0,  601,  610,  610,    0,  602,  611,  611,

      612,  612,  613,  613,  614,  614,  615,  615,  616,  616,
      617,  617,  618,  618,    0,  603,  619,  619,  620,  620,
      621,  621,  622,  622,  623,  623,  624,  624,    0,  610,
      607,  611,  608,  612,    0,  613,  625,  625,    0,  615,
      626,  626,    0,  616,  627,  627,  614,  618,  628,  628,
      629,  629,  630,  630,  621,  631,  631,    0,  619,  632,
      632,  633,  633,  634,  634,  622,  620,    0,  624,  635,
      635,  642,  642,    0,  643,  643,  644,  644,  645,  645,
      625,    0,  628,    0,  626,  646,  646,  630,  647,  647,
      648,  648,  649,  649,  650,  650,  633,  651,  651,  652,

      652,  653,  653,  654,  654,  634,    0,  632,  635,  643,
      655,  655,  656,  656,  657,  657,  658,  658,    0,  659,
      659,  648,    0,  649,  661,  661,  660,  660,    0,  645,
      651,  662,  662,    0,  646,  663,  663,  652,    0,  664,
      664,    0,  650,  665,  665,  666,  666,  654,  667,  667,
        0,  658,  668,  668,  669,  669,    0,  670,  670,  657,
      659,  660,  656,  671,  671,  672,  672,  673,  673,  674,
      674,    0,  662,  664,  675,  675,  676,  676,  665,  677,
      677,  682,  682,    0,  663,  683,  683,  668,  684,  684,
      685,  685,  686,  686,    0,  669,  670,  687,  687,  688,

      688,  689,  689,  690,  690,  691,  691,  676,  692,  692,
      693,  693,    0,  671,  694,  694,    0,  682,  674,  683,
      695,  695,    0,  675,  677,  696,  696,  697,  697,  698,
      698,    0,  687,  685,  684,  686,    0,  688,  699,  699,
      700,  700,  701,  701,  692,  694,  702,  702,  703,  703,
      704,  704,  705,  705,  691,    0,  696,    0,  706,  706,
      707,  707,  711,  711,  712,  712,  713,  713,  714,  714,
      715,  715,  701,  697,  716,  716,  717,  717,  718,  718,
      719,  719,  720,  720,  721,  721,  722,  722,    0,  700,
      706,  723,  723,  724,  724,  725,  725,  713,  705,  712,

        0,  711,  702,  714,  707,  715,    0,  726,  726,  727,
      727,  728,  728,  731,  731,  732,  732,  722,    0,  720,
        0,  721,  733,  733,  734,  734,  724,  735,  735,    0,
      725,  736,  736,  737,  737,  741,  741,  723,  726,  724,
      739,  739,  728,    0,  738,  738,    0,  740,  740,  743,
      743,  727,  742,  742,    0,  733,  744,  744,  745,  745,
      748,  748,  749,  749,  750,  750,  736,  731,  737,  751,
      751,  739,    0,  734,  752,  752,  735,  738,  740,  753,
      753,    0,  743,  741,  754,  754,  742,  755,  755,  756,
      756,  744,  757,  757,  758,  758,    0,  749,  759,  759,

      745,  760,  760,  761,  761,  763,  763,  764,  764,    0,
      750,  765,  765,  766,  766,  751,  767,  767,    0,  754,
      755,  768,  768,  769,  769,  770,  770,  757,  771,  771,
      772,  772,    0,  759,  773,  773,  774,  774,  764,  756,
      775,  775,  765,  776,  776,  777,  777,  778,  778,  779,
      779,  767,  780,  780,  781,  781,  768,  782,  782,  769,
        0,  771,    0,  772,  783,  783,  784,  784,  785,  785,
        0,    0,    0,  774,    0,    0,    0,    0,  776,  775,
      777,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  778,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  779,    0,  782,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  784,  787,    0,  787,  787,  787,  787,  787,  787,
      787,  788,  788,    0,  788,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  792,  792,    0,  792,  793,    0,  793,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  795,    0,
      795,  795,  795,  795,  795,  795,  795,  796,  796,  796,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[174] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "thriftl.ll"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */
#line 27 "thriftl.ll"

/* This is redundant with some of the flags in Makefile.am, but it works
 * when people override CXXFLAGS without being careful. The pragmas are
 * the 'right' way to do it, but don't work on old-enough GCC (in particular
 * the GCC that ship on Mac OS X 10.6.5, *counter* to what the GNU docs say)
 *
 * We should revert the Makefile.am changes once Apple ships a reasonable
 * GCC.
 */
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#endif

#ifdef _MSC_VER
//warning C4102: 'find_rule' : unreferenced label
#pragma warning(disable:4102)
//avoid isatty redefinition
#define YY_NEVER_INTERACTIVE 1
#endif

#include <cassert>
#include <string>
#include <errno.h>
#include <stdlib.h>

#ifdef _MSC_VER
#include "windows/config.h"
#endif
#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#if defined(BISON_USE_PARSER_H_EXTENSION)
#include "thrifty.h"
#else
#include "thrifty.hh"
#endif

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * We don't use it, and it fires up warnings at -Wall
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */
#line 1649 "thriftl.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 120 "thriftl.ll"


#line 1837 "thriftl.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 787 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2617 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 122 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 124 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "thriftl.ll"
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 128 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 129 "thriftl.ll"
{ return yytext[0];                }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 131 "thriftl.ll"
{ yylval.iconst=0; return tok_int_constant; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 132 "thriftl.ll"
{ yylval.iconst=1; return tok_int_constant; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 134 "thriftl.ll"
{ return tok_namespace;            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 135 "thriftl.ll"
{ return tok_cpp_namespace;        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 136 "thriftl.ll"
{ return tok_cpp_include;          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 137 "thriftl.ll"
{ return tok_cpp_type;             }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 138 "thriftl.ll"
{ return tok_java_package;         }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 139 "thriftl.ll"
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 140 "thriftl.ll"
{ return tok_csharp_namespace;     }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 141 "thriftl.ll"
{ return tok_delphi_namespace;     }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "thriftl.ll"
{ return tok_php_namespace;        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 143 "thriftl.ll"
{ return tok_py_module;            }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 144 "thriftl.ll"
{ return tok_perl_package;         }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 145 "thriftl.ll"
{ return tok_ruby_namespace;       }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "thriftl.ll"
{ return tok_smalltalk_category;   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 147 "thriftl.ll"
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 148 "thriftl.ll"
{ return tok_xsd_all;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 149 "thriftl.ll"
{ return tok_xsd_optional;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 150 "thriftl.ll"
{ return tok_xsd_nillable;         }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 151 "thriftl.ll"
{ return tok_xsd_namespace;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 152 "thriftl.ll"
{ return tok_xsd_attrs;            }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 153 "thriftl.ll"
{ return tok_include;              }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 154 "thriftl.ll"
{ return tok_void;                 }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 155 "thriftl.ll"
{ return tok_bool;                 }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 156 "thriftl.ll"
{ return tok_nil;                  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 157 "thriftl.ll"
{ return tok_i8;                   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 158 "thriftl.ll"
{ return tok_u8;                  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 159 "thriftl.ll"
{ return tok_i16;                  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 160 "thriftl.ll"
{ return tok_u16;                  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 161 "thriftl.ll"
{ return tok_i32;                  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 162 "thriftl.ll"
{ return tok_u32;                 }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 163 "thriftl.ll"
{ return tok_i64;                  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 164 "thriftl.ll"
{ return tok_u64;                 }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "thriftl.ll"
{ return tok_float;                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 166 "thriftl.ll"
{ return tok_double;               }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 167 "thriftl.ll"
{ return tok_string;               }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 168 "thriftl.ll"
{ return tok_binary;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 170 "thriftl.ll"
{ return tok_map;                  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 171 "thriftl.ll"
{ return tok_array;                }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 173 "thriftl.ll"
{ return tok_oneway;               }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 174 "thriftl.ll"
{ return tok_typedef;              }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 175 "thriftl.ll"
{ return tok_struct;               }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 176 "thriftl.ll"
{ return tok_union;                }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 177 "thriftl.ll"
{ return tok_xception;             }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "thriftl.ll"
{ return tok_extends;              }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 179 "thriftl.ll"
{ return tok_throws;               }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 180 "thriftl.ll"
{ return tok_service;              }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 181 "thriftl.ll"
{ return tok_topic;                }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 182 "thriftl.ll"
{ return tok_enum;                 }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 183 "thriftl.ll"
{ return tok_const;                }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 184 "thriftl.ll"
{ return tok_required;             }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 185 "thriftl.ll"
{ return tok_optional;             }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 187 "thriftl.ll"
{ return tok_reference;            }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 190 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 191 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 192 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 193 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 194 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 195 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 196 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 197 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 198 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 199 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 200 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 201 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 202 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 203 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 204 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 205 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 206 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 207 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 208 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 209 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 210 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 211 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 212 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 213 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 214 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 215 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 216 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 217 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 218 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 219 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 220 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 221 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 222 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 223 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 224 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 225 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 226 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 227 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 228 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 229 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 230 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 231 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 232 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 233 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 234 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 235 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 236 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 237 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 238 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 239 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 240 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 241 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 242 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 243 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 244 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 245 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 246 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 247 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 248 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 249 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 250 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 251 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 252 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 253 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 254 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 255 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 256 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 257 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 258 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 259 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 260 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 261 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 262 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 263 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 264 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 265 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 266 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 267 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 268 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 269 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 270 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 271 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 272 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 273 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 274 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 275 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 276 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 277 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 278 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 279 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 280 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 281 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 282 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 283 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 284 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 285 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 286 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 287 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 288 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 289 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 290 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 291 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 292 "thriftl.ll"
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 294 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 303 "thriftl.ll"
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 312 "thriftl.ll"
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 317 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 322 "thriftl.ll"
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 327 "thriftl.ll"
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 378 "thriftl.ll"
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    assert(strlen(g_doctext) >= 2);
    g_doctext[strlen(g_doctext) - 2] = ' ';
    g_doctext[strlen(g_doctext) - 1] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
    if( (g_program_doctext_candidate == NULL) && (g_program_doctext_status == INVALID)){
      g_program_doctext_candidate = strdup(g_doctext);
      g_program_doctext_lineno = g_doctext_lineno;
      g_program_doctext_status = STILL_CANDIDATE;
      pdebug("%s","program doctext set to STILL_CANDIDATE");
    }
  }
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 398 "thriftl.ll"
{
  unexpected_token(yytext);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 403 "thriftl.ll"
{
  /* Catch-all to let us catch "*" in the parser. */
  return (int) yytext[0];
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 408 "thriftl.ll"
ECHO;
	YY_BREAK
#line 2901 "thriftl.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 787 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 787 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 786);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 408 "thriftl.ll"



/* vim: filetype=lex
*/

